// Main script for module 'ChangePlayer'
// leicht angepasst für AGS 3 und für automatische Inventaranpassung von Rulaman

Character *cc_char[3];
int cc_busp[120];


function UpdateButtons(GUIControl *nb)
{
  int i = 1;
  Button *bu;
  while ( i < 3 )
	{
    bu = gMaingui.Controls[i+11].AsButton;
    if ( cc_char[i] == null)
			bu.Visible=false;
    else
		{
      bu.NormalGraphic = cc_busp[cc_char[i].ID];
      bu.Visible = true;
    }
    i++;
  }
  if ( nb != null )
	{
    i = 1;
    while ( i < 3 )
		{
      PlaySoundEx(8, 3);
      Wait(2);
      PlaySoundEx(8, 4);
      Wait(10);
      nb.Visible = false;
      Wait(10);
      nb.Visible = true;
      i++;
    }
  }
  return true;
} 

// + neu
bool AddChangePlayer(this Character*)
{
  if ( this == player || this == cc_char[1] || this == cc_char[2] )
	{
    Display("*ERROR*: Konnte %s nicht zu spielbaren Chars hinzufügen.", this.Name);
    Display("Ist bereits vorhanden.");
    return false;
  }
  if ( cc_char[2] != null )
	{
    Display("*ERROR*: Konnte %s nicht zu spielbaren Chars hinzufügen.", this.Name);
    Display("Bereits drei spielbare Chars vorhanden.");
    return false;
	}
	if ( cc_char[1] == null && cc_char[2] == null )
	{
		gMainInventory.Width = 125; // Standard 165 mit CharacterChange 125;
	}
  if ( cc_char[1] == null )
	{
    cc_char[1] = this;
    UpdateButtons(cc1);
  }
  else
	{
    cc_char[2] = this;
    UpdateButtons(cc2);
  }
}
// - neu

// veraltet (obsolete)
function AddChangePlayer(Character *cha)
{
	cha.AddChangePlayer();
}

bool SetPlayer(this Character*)
{
  //use this instead of SetPlayerCharacter function.
  int pc = player.ID;
  if ( player.Room == this.Room )
  {
    // if old and new player character are in the same room then scroll room
    int x  = GetViewportX();
    int tx = this.x - 160;
		
    if (tx < 0)
    {
      tx = 0;
    }
    else if ( tx > game.room_width - 320 )
    {
      tx = game.room_width - 320;
    }
    SetViewport (x, GetViewportY());
    while ( x < tx )
    {
      x += 5;
      if ( x > tx )
      {
        x = tx;
      }
      SetViewport (x, GetViewportY());
      Wait (1);
    }
    while (x > tx)
    {
      x -= 5;
      if ( x < tx )
      {
        x = tx;
      }
      SetViewport (x, GetViewportY());
      Wait (1);
    }
  }
  else
  {
    // if they are in different rooms
    player.StopMoving();
  }
  player.Clickable = true;
  this.Clickable = false;
  this.SetAsPlayer();
  ReleaseViewport();
	
	return true;
}

// veraltet (obsolete)
bool SetPlayer(int charid)
{
	return character[charid].SetAsPlayer();
}

function cc(int cid)
{
  Character *swap;
  swap = cc_char[cid];
  cc_char[cid] = player;
  UpdateButtons(null);
  swap.SetPlayer();
}

bool SetPlayerCC(this Character*)
{
  cc_char[1] = null;
  cc_char[2] = null;
  UpdateButtons(null);
  this.SetPlayer();
}

//veraltet (obsolete)
function SetPlayerCC(Character *cha)
{
	cha.SetPlayerCC();
}

int room_entry=0;

function SetPlayers(Character *cha, Character *ch1, Character *ch2)
{
  if ( ch1 == null && ch2 != null )
	{
    ch1 = ch2;
    ch2 = null;
  }
  room_entry = 1;
  cc_char[1] = ch1;
  cc_char[2] = ch2;
  cha.SetPlayer();
}

function repeatedly_execute()
{
  if (room_entry)
	{
    room_entry = 0;
    // additional players, but no buttons yet? (SetPlayers)
    Character *cha = cc_char[2];
    if ( cc_char[1] != null && cc1.Visible == false )
		{
      cc_char[2] = null;
      UpdateButtons(cc1);
    }
    cc_char[2] = cha;
    if ( cc_char[2] != null && cc2.Visible == false )
		{
      UpdateButtons(cc2);
    }
  }
}

bool SetChangePlayer(this Character *)
{
  if ( this == cc_char[1] )
		cc(1);
  else if ( this == cc_char[2] )
		cc(2);
  else if ( this == player)
		player.Say("*ERROR*: Hier bin ich doch :)");
  else
		player.Say("*ERROR*: Ne, %s ist nicht in der Liste!", this.Name);
}

// veraltet (obsolete)
bool SetChangePlayer(Character *cha)
{
	return cha.SetChangePlayer();
}

int ListLength()
{
  int c = 0;
  if ( cc_char[1] != null ) c++;
  if ( cc_char[2] != null ) c++;
  return c;
}

// + neu
bool RemoveChangePlayer(this Character*)
{
  if ( this == player )
	{
    if ( ListLength() == 0 )
		{
      Display("*ERROR*: Kann %s jetzt nicht entfernen.", player.Name);
      return false;
    }
    else
			SetPlayers(cc_char[1], cc_char[2], null);
    return UpdateButtons(null);
  }
  else if ( this == cc_char[2] )
	{
    cc_char[2] = null;
		if ( cc_char[1] == null )
		{
			gMainInventory.Width = 165; // Standard 165 mit CharacterChange 125;
		}
    return UpdateButtons(null);
  }
  else if ( this == cc_char[1] )
	{
    cc_char[1] = cc_char[2];
    cc_char[2] = null;
		if ( cc_char[1] == null )
		{
			gMainInventory.Width = 165; // Standard 165 mit CharacterChange 125;
		}
    return UpdateButtons(null);
  }
  else
	{
    Display("*ERROR*: Kann %s nicht entfernen, da er nicht hinzugefügt wurde.", this.Name);
    return false;
	}
}
// - neu

// veraltet (obsolete)
function RemoveChangePlayer(Character *cha)
{
	cha.RemoveChangePlayer();
}

bool ChangeableTo(Character *cha)
{
  return ( cha == cc_char[1] || cha == cc_char[2] );
}

int UpperButton()
{
  if ( cc_char[1] != null )
		return cc_char[1].ID;
  else
		return -1;
}

int LowerButton()
{
  if ( cc_char[2] != null )
		return cc_char[2].ID;
  else
		return -1;
}

// neue Funktionen
bool AddPlayerToSwitch(this Character*,  int pictureid)
{
	cc_busp[this.ID] = pictureid;
}
