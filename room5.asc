// Kevins Zimmer (Kevins Haus)

/****************************
*   Raum-Funktionen
****************************/
function room_FirstLoad()
{
	gAction.Visible = true;
	gMaingui.Visible = true;  
	gBorder.Visible = true;
	Mouse.Visible = true;
}

function room_Load()
{
	Door[eDoorNumKevin].Init(oTuer, hTuer);
}

function room_AfterFadeIn()
{
	if (player.PreviousRoom == 16) // Computer
	{
		gMaingui.Visible = true;
		gAction.Visible = true;
	}
}


/****************************
*   Tür-Hotspot-Funktionen
****************************/
function hTuer_AnyClick()
{
	//if ( Door[eDoorNumKevin].Click() == 0 ) Unhandled();
  if (Door[eDoorNumKevin].ClickSpecial(2, 3, iZimmerschluessel, 2) == 0) Unhandled();
}


/****************************
*   Objekt-Funktionen
****************************/
function oSchrank01_AnyClick()
{
	if (any_click_move(205, 125, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Leer.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich brauche kein Schranktürchen.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Wie wäre es mit schließen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Die ist schon auf.");
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			oSchrank01.Visible = false;
			PlaySound(5);
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Ich wüsste nicht, warum ich das in die Schublade legen sollte.");
		}
		else Unhandled();
	}
}

function oSchrank02_AnyClick()
{
	if (any_click_move(275, 125, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Leer.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich brauche kein Schranktürchen.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Wie wäre es mit schließen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Die ist schon auf.");
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			oSchrank02.Visible = false;
			PlaySound(5);
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Ich wüsste nicht, warum ich das in die Schublade legen sollte.");
		}
		else Unhandled();
	}
}

function oCashcard_AnyClick()
{
	if (any_click_move(258, 125, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Meine CashCard.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("");
			oCashcard.Visible = false;
			player.AddInventory(iCashcard);
			PlaySound(4);
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Und mit was, wenn sie auf dem Tisch liegt?");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Plastik lässt sich nicht öffnen.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Ich könnte sie falten, aber dann geht sie kaputt.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Ich will sie nicht verrücken.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Ich sollte sie nehmen.");
		}
		else Unhandled();
	}
}

function oSchublade01_AnyClick()
{
	if (any_click_move(205, 125, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Leer.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich brauche keine Schublade.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Wie wäre es mit schließen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Die ist schon auf.");
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			oSchublade01.Visible = false;
			PlaySound(1);
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Ich wüsste nicht, warum ich das in die Schublade legen sollte.");
		}
		else Unhandled();
	}
}

function oSchublade02_AnyClick()
{
	if (any_click_move(275, 125, eDirectionUp))
	{
		if (UsedAction(eActLookAt))
		{
			Wait(5);
      if (player.HasInventory(iSchraubenzieher))
      {
        player.Say("Leer.");
      }
      else
      {
        player.Say("Da liegt mein Schraubzieher.");
        PlaySound(4);
        player.AddInventory(iSchraubenzieher);
      }
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich brauche keine Schublade.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Wie wäre es mit schließen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Die ist schon auf.");
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			oSchublade02.Visible = false;
			PlaySound(1);
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Ich wüsste nicht, warum ich das in die Schublade legen sollte.");
		}
		else Unhandled();
	}
}


/****************************
*   Hotspot-Funktionen
****************************/
function hPoster_AnyClick()
{
	if (any_click_move(70, 120, eDirectionLeft))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Ein Maniac Mansion Mania Poster.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich lass es, wo es ist.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Mit was?");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Wie soll das gehen?");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Wie soll das gehen?");
		}
		else if (UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Ich lass es, wo es ist.");
		}
		else if (UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Ich kann es nicht in die Wand drücken.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Nein.");
		}
		else Unhandled();
	}
}

function hSchublade01_AnyClick()
{
	if (any_click_move(205, 125, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Das ist eine Schublade.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich will sie nicht mit mir herumtragen.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Wie wäre es mit öffnen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			oSchublade01.Visible = true;
			PlaySound(1);
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Ich kann sie nicht weiter rein drücken.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Ich wüsste nicht, warum ich das in die Schublade legen sollte.");
		}
		else Unhandled();
	}
}

function hSchublade02_AnyClick()
{
	if (any_click_move(275, 125, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Das ist eine Schublade.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich will sie nicht mit mir herumtragen.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Wie wäre es mit öffnen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			oSchublade02.Visible = true;
			PlaySound(1);
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Ich kann sie nicht weiter rein drücken.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Ich wüsste nicht, warum ich das in die Schublade legen sollte.");
		}
		else Unhandled();
	}
}

function hComputer_AnyClick()
{
	if (any_click_move(225, 130, eDirectionUp))
	{
		if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Da ist jetzt Doors XP drauf.");
      player.Say("Aber nicht mehr lange und es wird Eduntu Linox weichen.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Der bleibt da stehen.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Dafür habe ich jetzt keine Zeit.");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Es gibt keinen Grund, den zu öffnen.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Der ist schon zu.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Nein.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
      if (player.ActiveInventory == iSchraubenzieher)
      {
        player.Say("Warum sollte ich den Computer aufschrauben?");
      }
			player.Say("Das klappt nicht.");
		}
		else Unhandled();
	}
}

function hBett_AnyClick()
{
	if (any_click_move(70, 120, eDirectionDown))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Mein gemütliches Bett.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("So viel kann ich nicht tragen.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Null Bock.");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Ich besitze keinen Bettkasten.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Ich besitze keinen Bettkasten, welchen ich schließen könnte.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Klassischer Satz: Ich kann es nicht bewegen.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("");
		}
		else Unhandled();
	}
}

function hTelefon_AnyClick()
{
	if (any_click_move(258, 129, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Mein Telefon.");
		}
		else if (UsedAction(eActPickUp) || UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Ich benutze dafür mein Mobile.");
			player.FaceDirection(eDirectionDown);
			player.Say("Ich habe es nur damit ich ins Internet kann.");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Das geht so nicht.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Das geht so nicht.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das bringt nichts.");
		}
		else Unhandled();
	}
}

function hSchrank01_AnyClick()
{
	if (any_click_move(205, 125, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Das ist ein Schränkchen.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich will es nicht mit mir herumtragen.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Wie wäre es mit öffnen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			oSchrank01.Visible = true;
			PlaySound(1);
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Ich kann es nicht weiter rein drücken.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Ich wüsste nicht, warum ich das in das Schränkchen legen sollte.");
		}
		else Unhandled();
	}
}

function hSchrank02_AnyClick()
{
	if (any_click_move(275, 125, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Das ist ein Schränkchen.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich will es nicht mit mir herumtragen.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Wie wäre es mit öffnen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			oSchrank02.Visible = true;
			PlaySound(1);
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Ich kann es nicht weiter rein drücken.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Ich wüsste nicht, warum ich das in das Schränkchen legen sollte.");
		}
		else Unhandled();
	}
}

function hFenster_AnyClick()
{
	if (any_click_move(315, 132, eDirectionRight))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Schöne Aussicht.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Das ist im Mauerwerk verankert.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Nein.");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Nein, ich könnte rausfallen.");
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Ist doch schon zu.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Und damit das Fenster verkratzen.");
		}
		else Unhandled();
	}
}


/****************************
*   Regionen-Funktionen
****************************/
