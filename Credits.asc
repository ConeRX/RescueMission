// Main script for module 'Credits'

int CreditShow; // which one are we showing now?

CreditSequence Credits[CREDIT_MAX_SEQUENCES];
export Credits;

// Make getting sprite sizes work across v2.71 and v2.72
function GetSpriteHeight(int slot) {
  DynamicSprite *tmp=DynamicSprite.CreateFromExistingSprite(slot);
  int height=tmp.Height;
  tmp.Delete();
  return height;
}

function GetSpriteWidth(int slot) {
  DynamicSprite *tmp=DynamicSprite.CreateFromExistingSprite(slot);
  int width=tmp.Width;
  tmp.Delete();
  return width;
}


protected function CreditSequence::find_free() {
  int i=0;
  while ((i<CREDIT_MAX_LINES) && (this.line[i] != null)) {
    i++;
  }
  if (i==CREDIT_MAX_LINES)
    Display("Credit Module has reached maximum %d lines, contact game author and tell them to increase CREDIT_MAX_LINES", 
							CREDIT_MAX_LINES);
	else return i;
}

// TODO in add functions: add linebreaks for word-wrapping typed text

protected String CreditSequence::wordwrap(String s, int font, int width) {
  String t=s;   // input
  String l="";  // line
  String wl=""; // wrapped line
  String w="";  // word
  String o="";  // output
  int i=0;
  while (i<t.Length) {
    char c=t.Chars[i];
    l=l.AppendChar(c);
    if (c=='[') {
      o=o.Append(l);
      w="";
      l="";
      wl="";
    } else {
			if (GetTextWidth(l, font)>=width) {
				o=o.Append(wl);
				o=o.AppendChar('[');
				wl="";
				if (c==' ') {
					wl=wl.Append(w);
  				l=w;
					w="";
				} else {
				  w=w.AppendChar(c);
					l=w;
				}
			} else {
				if (c==' ') {
					if (wl!="") wl=wl.AppendChar(' ');
					wl=wl.Append(w);
					w="";
				} else {
				  w=w.AppendChar(c);
				}
      }
      
    }
      
    i++;
  }
  o=o.Append(l);
  return o;
}

function CreditSequence::AddTitle(String t, int x, int font, int colour, int y, CreditTransition_t start, CreditTransition_t end) {
	int n=this.find_free();
  t=GetTranslation(t);
  this.line[n]=t;
	if (font<0) this.fontimage[n]=this.DefaultTitleFont;
	else this.fontimage[n]=font;
	if (x < -1) this.x_pos[n]=this.DefaultTitleX;
  else this.x_pos[n]=x;
	if (y < -1) this.y_pos[n]=this.DefaultTitleY;
  else this.y_pos[n]=y;
  if (start < 0) this.starttrans[n]=this.DefaultTitleStartTransition;
  else this.starttrans[n]=start;
  if (end < 0) this.endtrans[n]=this.DefaultTitleEndTransition;
  else this.endtrans[n]=end;
	if (colour < 0) this.colour[n]=this.DefaultTitleColour;
  else this.colour[n]=colour;
  if (this.starttrans[n]==eCreditTypewriter) {
    int width=system.viewport_width;
    if (this.x_pos[n]!=eCreditCentred) width=width-this.x_pos[n];
		this.line[n]=this.wordwrap(t, this.fontimage[n], width);
	}
}
 
function CreditSequence::AddCredit(String t, int x, int font, int colour, int y, CreditTransition_t start, CreditTransition_t end) {
	int n=this.find_free();
  t=GetTranslation(t);
 	this.line[n]=t;
	if (font<0) this.fontimage[n]=this.DefaultCreditFont;
	else this.fontimage[n]=font;
	if (x < -1) this.x_pos[n]=this.DefaultCreditX;
  else this.x_pos[n]=x;
	if (y < -1) this.y_pos[n]=this.DefaultCreditY;
  else this.y_pos[n]=y;
  if (start < 0) this.starttrans[n]=this.DefaultCreditStartTransition;
  else this.starttrans[n]=start;
  if (end < 0) this.endtrans[n]=this.DefaultCreditEndTransition;
  else this.endtrans[n]=end;
	if (colour < 0) this.colour[n]=this.DefaultCreditColour;
  else this.colour[n]=colour;
  if (this.starttrans[n]==eCreditTypewriter) {
    int width=system.viewport_width;
    if (this.x_pos[n]!=eCreditCentred) width=width-this.x_pos[n];
		this.line[n]=this.wordwrap(t, this.fontimage[n], width);
	}
}

function CreditSequence::AddImage(int sprite, int x, int valign, CreditTransition_t start, CreditTransition_t end) {
	int n=this.find_free();
	this.line[n]=CREDIT_IMAGE;
	this.fontimage[n]=-sprite;
  this.x_pos[n]=x;
  this.y_pos[n]=valign;
  if (start < 0) this.starttrans[n]=this.DefaultImageStartTransition;
  else this.starttrans[n]=start;
  if (end < 0) this.endtrans[n]=this.DefaultImageEndTransition;
  else this.endtrans[n]=end;
}

function CreditSequence::Pause() {
  if (CreditShow==this.ID) CreditShow=-1;
  else if ((CreditShow!=this.ID) && (this.Running == eCreditRunning))
		CreditShow=this.ID;
}

function CreditSequence::Reset(int id) {
  this.DefaultCreditColour=0;
  this.DefaultCreditFont=0;
  this.DefaultCreditX=eCreditCentred;
  this.DefaultCreditY=eCreditCentred;
  this.DefaultTitleColour=0;
  this.DefaultTitleFont=0;
  this.DefaultTitleX=eCreditCentred;
  this.DefaultTitleY=eCreditCentred;
  this.LineSeparation=8;
  if (id>=0) this.ID=id;
  this.line[0]=null;
  this.Running=eCreditWait;
  this.StartY=system.viewport_height;
  this.MinY=0;
  this.CreditStyle=eCreditScrolling;
  this.EOLSound=-1;
  this.SpaceSound=-1;
  this.TypeSound=-1;
  this.SlideSpeed=1;
  this.JumpToRoomAtEnd=-1;
  this.StaticSpecialChars=CREDIT_DEFAULTSTATICSPECIAL;
  // TBD: add more resets
  // Go through overlays and remove?
}

protected function CreditSequence::endprev(int n, char c) {
  int i=0;
  
  while (i<n) {
    char e=this.line[i].Chars[this.line[i].Length-1];
    String s=String.Format("%c", e);
    if (e==c || (this.StaticSpecialChars.Contains(s)<0)) {
			this.starttrans[i]=eCreditTransDefault;
		}
    i++;
  }
}

protected function CreditSequence::cleartrans(int inc) {
  int ln=this.nextline;
	String nl=this.line[ln];
	String s=nl.Substring(nl.Length-1, 1);
	char c=s.Chars[0];
	if (this.StaticSpecialChars.Contains(s)<0) {
		this.starttrans[ln]=eCreditTransDefault;
	  this.endprev(ln, '[');
	} else {
	  this.nextline+=inc;
	}
}

protected function CreditSequence::checkline() {
  int ln=this.nextline;
  int id=this.ID;
	String nl=this.line[ln];
	int x=this.x_pos[ln];
	int y=this.y_pos[ln];
	if (nl==null) {  return 0; }
	if (this.CreditStyle==eCreditStatic) {
	  if (this.ol[ln]==null) {
	    if (nl==CREDIT_IMAGE) {
				int spr=-this.fontimage[ln];
				this.oh[ln]=GetSpriteHeight(spr);
				this.ow[ln]=GetSpriteWidth(spr);
				if (x==eCreditCentred) x=(system.viewport_width-this.ow[ln])/2;
				if (y==eCreditCentred) y=(system.viewport_height-this.oh[ln])/2;
				this.x_pos[ln]=x;
				this.y_pos[ln]=y;
	      if (this.starttrans[ln]==eCreditSlideBottom) {
					this.ol[ln]=Overlay.CreateGraphical(x, system.viewport_height, spr, true);
					this.timer=0;
				} else if (this.starttrans[ln]==eCreditSlideTop) {
					this.ol[ln]=Overlay.CreateGraphical(x, 0, spr, true);
					this.ol[ln].Y=-this.oh[ln];
					this.timer=0;
				} else if (this.starttrans[ln]==eCreditSlideLeft) {
					this.ol[ln]=Overlay.CreateGraphical(0, y, spr, true);
					this.ol[ln].X=-this.ow[ln];
					this.timer=0;
				} else if (this.starttrans[ln]==eCreditSlideRight) {
					this.ol[ln]=Overlay.CreateGraphical(system.viewport_width, y, spr, true);
					this.timer=0;
				} else {
				  // Simple
 					this.ol[ln]=Overlay.CreateGraphical(x, y, spr, true);
					this.timer=this.ExitDelay;
					//this.starttrans[ln]=eCreditTransDefault;
					this.cleartrans(0);
				}
		  } else {
		    while (nl.Length>0 && this.StaticSpecialChars.Contains(nl.Substring(0, 1))>=0) {
					this.endprev(ln, nl.Chars[0]); // Clear all old lines that ended with that char
					this.line[ln]=this.line[ln].Substring(1, nl.Length-1); // Chop it off
					nl=this.line[ln];
				}
		    // Remove terminal [ or ] from that to be displayed (not from array, though)
		    if (nl.Length>0) {
					String lc=nl.Substring(nl.Length-1, 1);
					if (this.StaticSpecialChars.Contains(lc)>=0) nl=nl.Truncate(nl.Length-1);
				}
				this.oh[ln]=GetTextHeight(nl, this.fontimage[ln], system.viewport_width);
				this.ow[ln]=GetTextWidth(nl, this.fontimage[ln]);
				if (nl.Length!=0) {
					if (x==eCreditCentred) x=(system.viewport_width-this.ow[ln])/2;
				  if (y==eCreditCentred) y=(system.viewport_height-this.oh[ln])/2;
					this.x_pos[ln]=x;
					this.y_pos[ln]=y;
					if (this.starttrans[ln]==eCreditSlideBottom) {
						this.ol[ln]=Overlay.CreateTextual(x, system.viewport_height, system.viewport_width, this.fontimage[ln], this.colour[ln], nl);
						this.timer=0;
					} else if (this.starttrans[ln]==eCreditSlideTop) {
						this.ol[ln]=Overlay.CreateTextual(x, 0, system.viewport_width, this.fontimage[ln], this.colour[ln], nl);
						this.ol[ln].Y= -this.oh[ln];
						this.timer=0;
					} else if (this.starttrans[ln]==eCreditSlideLeft) {
						this.ol[ln]=Overlay.CreateTextual(0, y, system.viewport_width, this.fontimage[ln], this.colour[ln], nl);
						this.ol[ln].X= -this.ow[ln];
						this.timer=0;
					} else if (this.starttrans[ln]==eCreditSlideRight) {
						this.ol[ln]=Overlay.CreateTextual(system.viewport_width, y, system.viewport_width, this.fontimage[ln], this.colour[ln], nl);
						this.timer=0;
				  } else if (this.starttrans[ln]==eCreditTypewriter) {
				    this.typet=String.Format("%c", nl.Chars[0]);
						this.ol[ln]=Overlay.CreateTextual(x, y, system.viewport_width, this.fontimage[ln], this.colour[ln], this.typet);
						this.timer=this.TypeDelay+Random(this.TypeRandom);
					} else {
						// Simple
						this.ol[ln]=Overlay.CreateTextual(x, y, system.viewport_width, this.fontimage[ln], this.colour[ln], nl);
						this.timer+=(((nl.Length / game.text_speed) + 1) * GetGameSpeed())+this.ExitDelay;
						//this.starttrans[ln]=eCreditTransDefault;
						this.cleartrans(0);
					}
		    } else {
		      this.timer=this.InterDelay;
		      this.nextline++;
		    }
		  }
		}
  } else {
		if (this.maxy<=this.StartY) {
			if (nl==CREDIT_IMAGE) {
				// Add an image in
				int spr=-this.fontimage[ln];
				//this.oh[ln]=GetGameParameter(GP_SPRITEHEIGHT, spr, 0, 0);
				//this.ow[ln]=GetGameParameter(GP_SPRITEWIDTH, spr, 0, 0);
				this.oh[ln]=GetSpriteHeight(spr);
				this.ow[ln]=GetSpriteWidth(spr);
				if (x==eCreditCentred) x=(system.viewport_width-this.ow[ln])/2;
				this.ol[ln]=Overlay.CreateGraphical(x, this.maxy, spr, true);
				if (this.y_pos[ln]==eCreditAlignBelow) 
						this.maxy+=this.oh[ln];
				else
						this.maxy+=this.y_pos[ln];
			} else {
				this.oh[ln]=GetTextHeight(nl, this.fontimage[ln], system.viewport_width);
				this.ow[ln]=GetTextWidth(nl, this.fontimage[ln]);
				if (nl.Length!=0) {
					if (x==eCreditCentred) x=(system.viewport_width-this.ow[ln])/2;
					this.ol[ln]=Overlay.CreateTextual(x, this.maxy, system.viewport_width, this.fontimage[ln], this.colour[ln], nl);
					
				} else {
					// Skip overlay for blank line, and just increment y pos
					nl="A";
				}
				this.maxy+=(this.oh[ln]+this.LineSeparation);
			}
			this.nextline++;
		}
	}
  return 1;
}
  

protected function CreditSequence::scroll () {
  // move all overlays up
  int anyleft=0;
  int i=0;
  while (i<this.nextline) {
    if (this.ol[i]!=null) {
			this.ol[i].Y--;
			if ((this.ol[i].Y+this.oh[i])<this.MinY) {
				this.ol[i].Remove();
				this.ol[i]=null;
			}
			else anyleft=1;
		}
		i++;
  }
  this.maxy--;
  this.checkline();
  if (!anyleft) {
    this.Running=eCreditFinished;
		CreditShow=-1;
		if (this.JumpToRoomAtEnd>=0) player.ChangeRoom(this.JumpToRoomAtEnd);
	}
}

function CreditSequence::Run() {
	CreditShow=this.ID;
	this.Running=eCreditRunning;
	this.nextline=0;
  this.maxy=this.StartY;
  this.checkline();
}


function CreditSequence::Stop() {
  int i=0;
  while (i<CREDIT_MAX_LINES) {
    if (this.ol[i]!=null && this.ol[i].Valid) this.ol[i].Remove();
    this.ol[i]=null;
    i++;
  }
  this.timer=0;
	this.Running=eCreditFinished;
	CreditShow=-1;
}


function CreditSequence::IsRunning() {
  return this.Running;
}


protected function CreditSequence::type() {
  int ln=this.nextline;
	String nl=this.line[ln];
	String tl=this.typet;
	if (tl==nl) {
		this.timer=this.ExitDelay;
		if (this.EOLSound>=0) PlaySound(this.EOLSound);
		this.cleartrans(0);
		this.nextline++;
		this.typet="";
	} else {
	  char c=nl.Chars[tl.Length];

	  tl=tl.AppendChar(c);
	  this.typet=tl;
	  this.ol[ln].SetText(system.viewport_width, this.fontimage[ln], this.colour[ln], tl);
	  if (c == ' ') { 
			if (this.SpaceSound>=0) PlaySound(this.SpaceSound);
	  } else if (c == '[') { 
	    if ((tl.Length!=nl.Length) && (this.EOLSound>=0)) PlaySound(this.EOLSound);
	  } else { 
			if (this.TypeSound>=0) PlaySound(this.TypeSound);
	  }
		this.timer=this.TypeDelay+Random(this.TypeRandom);
	}
}

protected function CreditSequence::update() {
  // move all overlays up

  int anyleft=0;
  int nl=this.nextline;
  int i=0;
  //if (this.CreditStyle==eCreditStatic) nl++;
  while (i<=nl) {
    if (this.ol[i]!=null) {
      if (this.starttrans[i]==eCreditTransDefault) {
        // exit transition
        if (this.endtrans[i]==eCreditSlideBottom) {
          this.timer=0;
          this.ol[i].Y+=this.SlideSpeed;
          if ((this.ol[i].Y)>this.StartY) {
						this.ol[i].Remove();
						this.ol[i]=null;
						if (i==nl) {
							this.nextline++;
							if (!anyleft) this.timer=this.InterDelay;
					  }
					}
			  } else if (this.endtrans[i]==eCreditSlideTop) {
          this.timer=0;
          this.ol[i].Y-=this.SlideSpeed;
          if ((this.ol[i].Y+this.oh[i])<this.MinY) {
						this.ol[i].Remove();
						this.ol[i]=null;
						if (i==nl) {
							this.nextline++;
							if (!anyleft) this.timer=this.InterDelay;
					  }
					}
			  } else if (this.endtrans[i]==eCreditSlideLeft) {
          this.timer=0;
			    this.ol[i].X-=this.SlideSpeed;
          if ((this.ol[i].X+this.ow[i])<0) {
						this.ol[i].Remove();
						this.ol[i]=null;
						if (i==nl) {
							this.nextline++;
							if (!anyleft) this.timer=this.InterDelay;
					  }
					}
			  } else if (this.endtrans[i]==eCreditSlideRight) {
          this.timer=0;
			    this.ol[i].X+=this.SlideSpeed;
          if ((this.ol[i].X)>=system.viewport_width) {
						this.ol[i].Remove();
						this.ol[i]=null;
						if (i==nl) {
							this.nextline++;
							if (!anyleft) this.timer=this.InterDelay;
					  }
					}
			  } else {
          this.timer=this.InterDelay;
					this.ol[i].Remove();
					this.ol[i]=null;
					if (i==nl) this.nextline++;
				}
		  } // if starttrans==default
      anyleft=1;
		} // if overlay null
		i++;
  } //while
  i=nl;
  if (this.ol[i]!=null) {
		    // Incoming
        if (this.starttrans[i]==eCreditSlideBottom) {
          if (this.ol[i].Y<=this.y_pos[i]) {
						this.ol[i].Y=this.y_pos[i];
						this.cleartrans(1);
	          this.timer+=(((this.line[i].Length / game.text_speed) + 1) * GetGameSpeed())+this.ExitDelay;
					} else {
						this.ol[i].Y-=this.SlideSpeed;
						this.timer=0;
					}
 			  } else if (this.starttrans[i]==eCreditSlideTop) {
          if (this.ol[i].Y>=this.y_pos[i]) {
						this.ol[i].Y=this.y_pos[i];
						this.cleartrans(1);
	          this.timer+=(((this.line[i].Length / game.text_speed) + 1) * GetGameSpeed())+this.ExitDelay;
					} else {
						this.ol[i].Y+=this.SlideSpeed;
						this.timer=0;
					}
			  } else if (this.starttrans[i]==eCreditSlideLeft) {
          if (this.ol[i].X>=this.x_pos[i]) {
						this.ol[i].X=this.x_pos[i];
						this.cleartrans(1);
	          this.timer+=(((this.line[i].Length / game.text_speed) + 1) * GetGameSpeed())+this.ExitDelay;
					} else {
						this.ol[i].X+=this.SlideSpeed;
						this.timer=0;
					}
			  } else if (this.starttrans[i]==eCreditSlideRight) {
          if (this.ol[i].X<=this.x_pos[i]) {
						this.ol[i].X=this.x_pos[i];
						this.cleartrans(1);
	          this.timer+=(((this.line[i].Length / game.text_speed) + 1) * GetGameSpeed())+this.ExitDelay;
					} else {
						this.ol[i].X-=this.SlideSpeed;
						this.timer=0;
					}
			  } else if (this.starttrans[i]==eCreditSimple) {
			    this.cleartrans(1);
			  } else if (this.starttrans[i]==eCreditTypewriter) {
			    this.type();
		    }
  }
  if (this.nextline!=nl) {
      anyleft+=this.checkline();
  }
  if (!anyleft ) {
    this.Running=eCreditFinished;
		CreditShow=-1;
		if (this.JumpToRoomAtEnd>=0) player.ChangeRoom(this.JumpToRoomAtEnd);
	}
}

function CreditSequence::rep_ex () {
#ifdef CREDITDEBUG
  dbgLabel.Text=String.Format("%4d %4d %s",  this.nextline,  this.timer,  this.line[this.nextline]);
#endif  
  if (this.timer==0) {
    if (this.CreditStyle==eCreditScrolling ) {
			// Do scroll
			this.scroll();
			this.timer=this.Delay;
		} else if (this.CreditStyle==eCreditStatic ) {
		  this.update();
		}
  } else {
    this.timer--;
  }
}

function game_start () {
  int i=0;
  while (i<CREDIT_MAX_SEQUENCES) {
    Credits[i].Reset(i);
    i++;
  }
	CreditShow=-1;
}

function repeatedly_execute () {
	if (CreditShow >= 0) {
	  Credits[CreditShow].rep_ex();
  } 
}

int ee;

function on_key_press (int keycode) {
  if ((keycode=='S') && (ee<2)) ee++;
  else if ((keycode=='H') && (ee==2)) ee++;
  else if ((keycode=='?') && (ee==3)) {
		Overlay *cmee=Overlay.CreateTextual(2, 2, 300, 1, 60000, "Credits module 1.13 by SSH");
		Wait(40);
		cmee.Remove();
	}
}