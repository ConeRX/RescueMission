// Bibliothek

/****************************
*   Raum-Funktionen
****************************/

function room_Load()
{
  Door[eTuerBibliothek].Init(oTuer01, hTuer01);
  Door[eTuerEsszimmer].Init(oTuer02, hTuer02);
}

function room_AfterFadeIn()
{

}

function room_RepExec()
{
  if (keypad_function == 1)
  {
    aSound2.Play();
    oTuer01.Visible = true;
    keypad_function++;
    Door[eTuerBibliothek].i_GlobalInt = eDoorOpen;
  }
}

function room_Leave()
{

}

/****************************
*   Tür-Hotspot-Funktionen
*
***************************/

function hTuer01_AnyClick()
{
  if (keypad_function == 2)
  {
    if (any_click_move(315, 125, eDirectionUp))
    {
      if(Door[eTuerBibliothek].Click()==0)
        Unhandled();
    }  
  }
  else
  {
    if (any_click_move(315, 125, eDirectionUp))
    {
      if (UsedAction(eActLookAt))
      {
        Wait(5);
        player.Say("Eine Tür. Daneben ein Eingabefeld.");
      }
      else if (UsedAction(eActUse))
      {
        Wait(5);
        player.Say("Man benutzt Türen, indem man sie öffnet oder schließt.");
      }
      else if (UsedAction(eActPickUp))
      {
        Wait(5);
        player.Say("Schon mal eine Tür aus ihren Angeln gerissen?");
      }
      else if (UsedAction(eActOpen))
      {
        Wait(5);
        player.Say("Abgeschlossen.");
        Wait(5);
        player.Say("Mit dem richtigen Code liese sie sich wahrscheinlich öffnen.");
      }
      else if (UsedAction(eActClose))
      {
        Wait(5);
        player.Say("Ist bereits zu.");
      }
      else if (UsedAction(eActPull) || UsedAction(eActPush))
      {
        Wait(5);
        player.Say("Da bewegt sich nichts.");
      }
      else if (UsedAction(eActUseInventory))
      {
        Wait(5);
        if (player.ActiveInventory == iSchluesselGelb || player.ActiveInventory == iHaustuerKey || player.ActiveInventory == iZimmerschluessel || player.ActiveInventory == iCandleKey)
        {
          player.Say("Der Schlüssel passt nicht.");
          player.Say("Und ich bezweifel, dass es überhaupt einen Schlüssel für diese Tür gibt.");
        } else player.Say("Das hilft mir auch nicht dabei, die Tür zu öffnen.");
      }
      else Unhandled();
    }
  }
}

function hTuer02_AnyClick()
{
  if (oMetallplatte.Visible == false)
  {
    if (any_click_move(40, 130, eDirectionLeft))
    {
      if(Door[eTuerEsszimmer].Click()==0)
        Unhandled();
    }  
  }
  else
  {
    if (any_click_move(40, 130, eDirectionLeft))
    {
      if (UsedAction(eActLookAt))
      {
        Wait(5);
        player.Say("Eine Tür.");
      }
      else if (UsedAction(eActUse) || UsedAction(eActPull) || UsedAction(eActPush))
      {
        Wait(5);
        player.Say("Geht mit der Metallplatte vorne dran nicht.");
      }
      else if (UsedAction(eActPickUp))
      {
        Wait(5);
        player.Say("Schon mal eine Tür aus ihren Angeln gerissen?");
        player.Say("Außerdem ist da immer noch die Metallplatte.");
      }
      else if (UsedAction(eActOpen))
      {
        Wait(5);
        player.Say("Würde ich ja gerne, aber die Metallplatte blockiert die Tür.");
      }
      else if (UsedAction(eActClose))
      {
        Wait(5);
        player.Say("Die Tür ist schon zu. Auch ohne Metallplatte.");
      }
      else if (UsedAction(eActUseInventory))
      {
        Wait(5);
        player.Say("Ich muss es schon mit der Metallplatte benutzen.");
      }
      else Unhandled();
    }
  }
}

/****************************
*   Hotspot-Funktionen
****************************/

function hBuecher_AnyClick()
{
  if (any_click_move(190, 130, eDirectionUp))
	{
    if (UsedAction(eActWalkTo))
		{
		//	Wait(5);
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Bücher.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Das sind zu viele.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
      player.Say("Ich möchte jetzt nicht lesen.");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
      player.Say("Ich will sie nicht alle öffnen.");
		}
    		else if (UsedAction(eActClose))
		{
			Wait(5);
      player.Say("Die sind alle geschlossen.");
		}
		else if (UsedAction(eActPull))
		{
			Wait(5);
      player.Say("Die lasse ich so stehen.");
		}
    else if (UsedAction(eActPush))
		{
			Wait(5);
      player.Say("Die lasse ich so stehen.");
		}
    else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das macht kein Sinn.");
		}
		else Unhandled();
  }
}

/****************************
*   Objekt-Funktionen
****************************/

function oTVMag_AnyClick()
{
  if (any_click_move(oTVMag.X+5, oTVMag.Y, eDirectionUp))
  {
    if (UsedAction(eActLookAt))
    {
      Wait(5);
      player.Say("\"TV-Spülwurm\".");
    }
    else if (UsedAction(eActUse) || UsedAction(eActOpen))
    {
      Wait(5);
      player.Say("Vorher muss ich es aus dem Regal nehmen.");
    }
    else if (UsedAction(eActPickUp) || UsedAction(eActPull))
    {
      Wait(5);
      PlaySound(4);
      player.AddInventory(iTVMag);
      oTVMag.Visible = false;
    }
    else if (UsedAction(eActClose))
    {
      Wait(5);
      player.Say("Das Buch ist bereits zugeklappt.");
    }
    else if (UsedAction(eActPush))
    {
      Wait(5);
      player.Say("Das Buch steht bereits an der Wand. Ich kann es nicht noch weiter reindrücken.");
    }
    else if (UsedAction(eActUseInventory))
    {
      Wait(5);
      player.Say("Diese Dinge kann ich nicht miteinander benutzen.");
    }
    else Unhandled();
  }
}

function oHandbuch_AnyClick()
{
  if (any_click_move(oHandbuch.X+5, oHandbuch.Y, eDirectionUp))
  {
    if (UsedAction(eActLookAt))
    {
      Wait(5);
      player.Say("Das Chicagoer Handbuch für den thermodynamischen Fluxkompensator.");
    }
    else if (UsedAction(eActUse) || UsedAction(eActOpen))
    {
      Wait(5);
      player.Say("Vorher muss ich es aus dem Regal nehmen.");
    }
    else if (UsedAction(eActPickUp) || UsedAction(eActPull))
    {
      Wait(5);
      PlaySound(4);
      player.AddInventory(iHandbuch);
      oHandbuch.Visible = false;
    }
    else if (UsedAction(eActClose))
    {
      Wait(5);
      player.Say("Das Buch ist bereits zugeklappt.");
    }
    else if (UsedAction(eActPush))
    {
      Wait(5);
      player.Say("Das Buch steht bereits an der Wand. Ich kann es nicht noch weiter reindrücken.");
    }
    else if (UsedAction(eActUseInventory))
    {
      Wait(5);
      player.Say("Diese Dinge kann ich nicht miteinander benutzen.");
    }
    else Unhandled();
  }
}

function oTagebuch_AnyClick()
{
  if (any_click_move(oTagebuch.X+5, oTagebuch.Y, eDirectionUp))
  {
    if (UsedAction(eActLookAt))
    {
      Wait(5);
      player.Say("\"Die geheimen Tagebücher der Britney B.\"");
    }
    else if (UsedAction(eActUse) || UsedAction(eActOpen))
    {
      Wait(5);
      player.Say("Vorher muss ich es aus dem Regal nehmen.");
    }
    else if (UsedAction(eActPickUp) || UsedAction(eActPull))
    {
      Wait(5);
      PlaySound(4);
      player.AddInventory(iTagebuch);
      oTagebuch.Visible = false;
    }
    else if (UsedAction(eActClose))
    {
      Wait(5);
      player.Say("Das Buch ist bereits zugeklappt.");
    }
    else if (UsedAction(eActPush))
    {
      Wait(5);
      player.Say("Das Buch steht bereits an der Wand. Ich kann es nicht noch weiter reindrücken.");
    }
    else if (UsedAction(eActUseInventory))
    {
      Wait(5);
      player.Say("Diese Dinge kann ich nicht miteinander benutzen.");
    }
    else Unhandled();
  }
}

function oAlchemiebuch_AnyClick()
{
  if (any_click_move(oAlchemiebuch.X+5, oAlchemiebuch.Y, eDirectionUp))
  {
    if (UsedAction(eActLookAt))
    {
      Wait(5);
      player.Say("Ein Buch über Alchemie.");
    }
    else if (UsedAction(eActUse) || UsedAction(eActOpen))
    {
      Wait(5);
      player.Say("Vorher muss ich es aus dem Regal nehmen.");
    }
    else if (UsedAction(eActPickUp) || UsedAction(eActPull))
    {
      Wait(5);
      PlaySound(4);
      player.AddInventory(iAlchmiebuch);
      oAlchemiebuch.Visible = false;
    }
    else if (UsedAction(eActClose))
    {
      Wait(5);
      player.Say("Das Buch ist bereits zugeklappt.");
    }
    else if (UsedAction(eActPush))
    {
      Wait(5);
      player.Say("Das Buch steht bereits an der Wand. Ich kann es nicht noch weiter reindrücken.");
    }
    else if (UsedAction(eActUseInventory))
    {
      Wait(5);
      player.Say("Diese Dinge kann ich nicht miteinander benutzen.");
    }
    else Unhandled();
  }
}

function oMetallplatte_AnyClick()
{
  if (any_click_move(50, 130, eDirectionLeft)) // 50 130
  {
    if (UsedAction(eActLookAt))
    {
      Wait(5);
      player.Say("Eine Metallplatte, die die Tür blockiert.");
    }
    else if (UsedAction(eActUse))
    {
      Wait(5);
      player.Say("Mit was?");
    }
    else if (UsedAction(eActPickUp) || UsedAction(eActPull))
    {
      Wait(5);
      player.Say("Ich glaube nicht, dass ich das nehmen kann. Die ist an der Wand befesttigt.");
    }
    else if (UsedAction(eActOpen))
    {
      Wait(5);
      player.Say("Da gibt es nichts, das man öffnen kann.");
    }
    else if (UsedAction(eActClose))
    {
      Wait(5);
      player.Say("Da gibt es nichts, das man schließen kann.");
    }
    else if (UsedAction(eActPush))
    {
      Wait(5);
      player.Say("Die Platte bewegt sich keinen Meter.");
    }
    else if (UsedAction(eActUseInventory))
    {
      Wait(5);
      if (player.ActiveInventory == iGlas)
      {
        if (iGlas.Graphic == 61)
        {
          Wait(20);
          player.Walk(34, 130, eBlock, eAnywhere);
          player.LockView(KEVINACID);
          Wait(25);
          aSound28.Play();
          player.Animate(1, 5, eOnce, eBlock, eForwards);
          oMetallplatte.SetView(VMETALLPLATTE, 0, 0);
          iGlas.Graphic = 59;
          /*
          int i = 0;
          while (i <= 100)
          {
            oMetallplatte.Transparency = i;
            i = i + 10;
            Wait(2);
          }*/
          player.UnlockView();
          player.Walk(50, 130, eBlock, eAnywhere);
          player.FaceDirection(eDirectionLeft);
          oMetallplatte.Animate(0, 5, eOnce, eBlock, eForwards);
          oMetallplatte.Visible = false;
          Wait(20);
          player.Say("Echt starkes Zeug!");
        }
        else
        {
          player.Say("Etwas drüber zu schütten ist keine schlechte Idee.");
          player.Say("Aber es müsste schon Säure sein.");
        }
      }
      else if (player.ActiveInventory == iSchraubenzieher)
      {
        player.Say("Der Schraubenzieher ist zu klein.");
      } else player.Say("Damit bekomme ich die Metallplatte auch nicht weg.");
    }
    else Unhandled();
  }
}

function oEingabefeld_AnyClick()
{
  if (any_click_move(338, 130, eDirectionUp))
  {
    if (UsedAction(eActLookAt))
    {
      Wait(5);
      player.Say("Ein Eingabefeld für einen numerischen Code von der Firma Code:Elite.");
      player.Say("Öffnet bei korrekter Eingabe höchstwahrscheinlich die Tür.");
    }
    else if (UsedAction(eActUse))
    {
      Wait(5);
      //player.Say("Zwecklos. Weder kenne ich den Code, noch habe ich irgendwelche Mittel um ihn heraus zu finden.");
      if (keypad_function == 0)
      {
        Keypad_start(1337);
      } else player.Say("Ich möchte die Tür nicht wieder versperren.");
    }
    else if (UsedAction(eActPickUp) || UsedAction(eActPull))
    {
      Wait(5);
      player.Say("Ich möchte das Panel nicht rausreißen.");
    }
    else if (UsedAction(eActOpen))
    {
      Wait(5);
      player.Say("Selbst wenn ich das Eingabefeld aufschraube, verstehe ich davon zu wenig als das ich es manipulieren könnte.");
    }
    else if (UsedAction(eActClose))
    {
      Wait(5);
      player.Say("Ist schon zugeschraubt.");
    }
    else if (UsedAction(eActPush))
    {
      Wait(5);
      player.Say("Da bewegt sich nichts.");
    }
    else if (UsedAction(eActUseInventory))
    {
      Wait(5);
      if (player.ActiveInventory == iSchraubenzieher)
      {
        player.Say("Selbst wenn ich es aufschraube, verstehe ich davon zu wenig als das ich es manipulieren könnte.");
      } else player.Say("Das hilft mir auch nicht weiter.");
    }
    else Unhandled();
  }
}

/****************************
*   Region-Funktionen
****************************/

function region1_WalksOnto()
{
  player.ChangeRoom(21, 247, 129, eDirectionUp);
}

